# Docker Compose configuration for NewWeb3 - Backend-only core AI
# This version excludes Telegram bot functionality

services:
  # Main core AI service (FastAPI + LangGraph)
  core:
    build:
      context: .
      dockerfile: Dockerfile.core
    container_name: core
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - FIREWORKS_API_KEY=${FIREWORKS_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
     # - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
     # - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
     # - LANGFUSE_HOST=${LANGFUSE_HOST}
      - MAIN_DIR=${MAIN_DIR:-/app}
      - PROMPTS_CONFIG_PATH=${PROMPTS_CONFIG_PATH:-/app/configs/prompts.yaml}
      - PROMPT_SERVICE_URL=${PROMPT_SERVICE_URL}
      - GRAPH_CONFIG_PATH=${GRAPH_CONFIG_PATH:-/app/configs/graph.yaml}
      - core_HOST=${core_HOST:-0.0.0.0}
      - core_PORT=${core_PORT:-8000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - ARTIFACTS_BASE_PATH=${ARTIFACTS_BASE_PATH:-/app/data/artifacts}
      - ARTIFACTS_ENSURE_PERMISSIONS=${ARTIFACTS_ENSURE_PERMISSIONS:-true}
      - ARTIFACTS_MAX_FILE_SIZE=${ARTIFACTS_MAX_FILE_SIZE:-10485760}
      - SECURITY_ENABLED=${SECURITY_ENABLED:-true}
      - SECURITY_FUZZY_THRESHOLD=${SECURITY_FUZZY_THRESHOLD:-0.85}
      - SECURITY_MIN_CONTENT_LENGTH=${SECURITY_MIN_CONTENT_LENGTH:-10}
    ports:
      - "8000:8000"
    restart: always
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./configs:/app/configs
    depends_on:
      postgres:
        condition: service_healthy
      prompt-config-service:
        condition: service_healthy
    networks:
      - newweb3-network

  # Artifacts Service - for managing generated materials
  artifacts-service:
    build:
      context: .
      dockerfile: Dockerfile.artifacts-service
    container_name: article
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ARTIFACTS_HOST=0.0.0.0
      - ARTIFACTS_PORT=8001
      - ARTIFACTS_DATA_PATH=${ARTIFACTS_DATA_PATH:-/app/data/artifacts}
      - ARTIFACTS_MAX_FILE_SIZE=${ARTIFACTS_MAX_FILE_SIZE:-10485760}
      - ARTIFACTS_MAX_FILES_PER_THREAD=100
      - ARTIFACTS_LOG_LEVEL=${ARTIFACTS_LOG_LEVEL:-INFO}
      - ARTIFACTS_JWT_SECRET_KEY=${ARTIFACTS_JWT_SECRET_KEY:-your-secret-jwt-key-change-me}
      - ARTIFACTS_BOT_API_KEY=${ARTIFACTS_API_KEY:-your-artifacts-api-key}
    ports:
      - "8001:8001"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - newweb3-network

  # Prompt Configuration Service - for dynamic prompt generation
  prompt-config-service:
    build:
      context: .
      dockerfile: Dockerfile.prompt-config-service
    container_name: studio
    environment:
      - DATABASE_URL=${PROMPT_CONFIG_DATABASE_URL}
      - PROMPT_CONFIG_DATABASE_URL=${PROMPT_CONFIG_DATABASE_URL}
      - SERVICE_HOST=${PROMPT_CONFIG_SERVICE_HOST:-0.0.0.0}
      - SERVICE_PORT=${PROMPT_CONFIG_SERVICE_PORT:-8002}
      - LOG_LEVEL=${PROMPT_CONFIG_LOG_LEVEL:-INFO}
      - PROMPTS_CONFIG_PATH=${PROMPTS_CONFIG_PATH:-/app/configs/prompts.yaml}
      - INITIAL_DATA_PATH=${PROMPT_CONFIG_INITIAL_DATA_PATH}
      - CACHE_TTL=${PROMPT_CONFIG_CACHE_TTL:-300}
      - JWT_SECRET_KEY=${ARTIFACTS_JWT_SECRET_KEY:-your-secret-jwt-key-change-me}
      - JWT_ALGORITHM=${ARTIFACTS_JWT_ALGORITHM:-HS256}
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
    networks:
      - newweb3-network

  # PostgreSQL database
  postgres:
    image: postgres:${POSTGRES_VERSION:-16}
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: core
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    networks:
      - newweb3-network

  # LangFuse Worker (optional - for observability)
  langfuse-worker:
    image: langfuse/langfuse-worker:3
    container_name: newweb3-langfuse-worker
    profiles: ["langfuse"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment: &langfuse-env
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/langfuse
      SALT: "mysalt"
      ENCRYPTION_KEY: "0000000000000000000000000000000000000000000000000000000000000000"
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED:-true}
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: ${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-true}
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      LANGFUSE_USE_AZURE_BLOB: ${LANGFUSE_USE_AZURE_BLOB:-false}
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_EVENT_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_EVENT_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID:-minio}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY:-miniosecret}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: ${LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT:-http://minio:9000}
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_AUTH: ${REDIS_AUTH:-myredissecret}
    networks:
      - newweb3-network

  # LangFuse Web UI (optional)
  langfuse-web:
    image: langfuse/langfuse:3
    container_name: newweb3-langfuse-web
    profiles: ["langfuse"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      <<: *langfuse-env
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: mysecret
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}
    networks:
      - newweb3-network

  # ClickHouse (for LangFuse)
  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: newweb3-clickhouse
    profiles: ["langfuse"]
    environment:
      CLICKHOUSE_DB: default
      CLICKHOUSE_USER: clickhouse
      CLICKHOUSE_PASSWORD: clickhouse
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - newweb3-network

  # MinIO (for LangFuse)
  minio:
    image: minio/minio
    container_name: newweb3-minio
    profiles: ["langfuse"]
    entrypoint: sh
    command: -c 'mkdir -p /data/langfuse && minio server --address ":9000" --console-address ":9001" /data'
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: miniosecret
    ports:
      - "9090:9000"
      - "9091:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 1s
      timeout: 5s
      retries: 5
    networks:
      - newweb3-network

  # Redis (for LangFuse)
  redis:
    image: redis:7
    container_name: newweb3-redis
    profiles: ["langfuse"]
    command: --requirepass ${REDIS_AUTH:-myredissecret}
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 10s
      retries: 10
    networks:
      - newweb3-network

volumes:
  postgres_data:
    driver: local
  clickhouse_data:
    driver: local
  minio_data:
    driver: local

networks:
  newweb3-network:
    driver: bridge
